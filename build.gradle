import com.github.spotbugs.SpotBugsTask

plugins {
    id "java"
    id "com.dorongold.task-tree" version "1.3.1"
    id "org.unbroken-dome.test-sets" version "2.0.3"
    id "com.github.spotbugs" version "1.6.8"
    id "jacoco"
}

group = "hm.binkley.labs"
version = "0"

testSets {
    integrationTest {
        shouldRunAfter test
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:1.18.4"

    compileOnly "org.projectlombok:lombok:1.18.4"
    compileOnly "com.github.spotbugs:spotbugs-annotations:3.1.10"

    testCompileOnly "org.projectlombok:lombok:1.18.4"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:3.1.10"

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.2"
    testImplementation "org.awaitility:awaitility:3.1.5"

    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.3.2"
}

sourceCompatibility = 11
targetCompatibility = 11

spotbugs {
    toolVersion = "3.1.10"
}

jacoco {
    toolVersion = "0.8.2"
}

defaultTasks "build"

tasks.withType(JavaCompile) {
    options.compilerArgs = [
            "-encoding", "UTF8",
            "-parameters",
            "-Werror",
            "-Xdiags:verbose",
            "-Xlint:all,-processing,-serial"
    ]
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        exceptionFormat "full"
    }
}

tasks.withType(SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

tasks.withType(JacocoReportBase) {
    executionData(fileTree(buildDir).include("/jacoco/*.exec"))
}

tasks {
    wrapper {
        distributionType = Wrapper.DistributionType.ALL
    }

    clean {
        delete "out"
    }

    jacocoTestReport {
        dependsOn(test, "integrationTest")
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = new BigDecimal("0.97")
                }
            }
        }
        dependsOn(jacocoTestReport)
    }

    check {
        dependsOn(jacocoTestCoverageVerification)
    }
}
